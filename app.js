import dotenv from 'dotenv';
dotenv.config();

import TelegramBot from 'node-telegram-bot-api';
import axios from 'axios';
import mongoose from 'mongoose';
import fs from 'fs';
import path from 'path';
import os from 'os';

// --- –ö–æ–Ω—Ñ–∏–≥ ---
const { TELEGRAM_TOKEN, RAPIDAPI_KEY, MONGO_URI, FLYER_API_KEY } = process.env;
if (!TELEGRAM_TOKEN || !RAPIDAPI_KEY || !MONGO_URI || !FLYER_API_KEY) {
    console.error('‚ùå –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–¥–∞–Ω—ã');
    process.exit(1);
}

// --- MongoDB ---
mongoose
    .connect(MONGO_URI)
    .then(() => console.log('‚úÖ MongoDB –ø–æ–¥–∫–ª—é—á–µ–Ω–∞'))
    .catch((err) => console.error('‚ùå –û—à–∏–±–∫–∞ MongoDB:', err));

const User = mongoose.model(
    'User',
    new mongoose.Schema({
        userId: { type: Number, required: true, unique: true },
        chatId: { type: Number, required: true },
    })
);

// --- –¢–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç ---
const bot = new TelegramBot(TELEGRAM_TOKEN, { polling: true });
const MINI_APP_LINK = 'https://t.me/FlyWebTasksBot/app?startapp=3HkVHT';

// –ó–∞–≥—Ä—É–∑—á–∏–∫ –º–µ–¥–∏–∞
async function downloadMedia(url, filename) {
    const resp = await axios.get(url, {
        responseType: 'stream',
        timeout: 30000,
    });
    const file = path.join(os.tmpdir(), filename);
    const w = fs.createWriteStream(file);
    resp.data.pipe(w);
    return new Promise((res, rej) => {
        w.on('finish', () => res(file));
        w.on('error', rej);
    });
}

// --- /start: –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á ---
bot.onText(/\/start/, async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;

    try {
        const { data } = await axios.post(
            'https://api.flyerservice.io/get_completed_tasks',
            { key: FLYER_API_KEY, user_id: userId },
            { headers: { 'Content-Type': 'application/json' } }
        );

        if (data.error) {
            console.warn('Flyer get_completed_tasks error:', data.error);
            // –í —Å–ª—É—á–∞–µ –ª—é–±–æ–π –æ—à–∏–±–∫–∏ API ‚Äî –≤—Å—ë —Ä–∞–≤–Ω–æ –¥–∞—ë–º —Å—Å—ã–ª–∫—É –Ω–∞ –º–∏–Ω–∏-–∞–ø–ø
            return bot.sendMessage(
                chatId,
                `‚ÑπÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞–Ω–∏–π, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –º–∏–Ω–∏-–∞–ø–ø:\n${MINI_APP_LINK}\n\n` +
                    `–ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–Ω–æ–≤–∞ –Ω–∞–∂–º–∏—Ç–µ /start.`
            );
        }

        const completed = (data.result.completed_tasks || []).length;
        const total = data.result.count_all_tasks || 0;

        if (total === 0) {
            // –Æ–∑–µ—Ä –µ—â—ë –Ω–µ –ø–æ–ª—É—á–∏–ª –∑–∞–¥–∞—á ‚Äî –æ–Ω –Ω–µ –∑–∞—Ö–æ–¥–∏–ª –≤ –º–∏–Ω–∏-–∞–ø–ø
            return bot.sendMessage(
                chatId,
                `üìã –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏—è, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –≤ –º–∏–Ω–∏-–∞–ø–ø:\n${MINI_APP_LINK}\n\n` +
                    `–ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è ‚Äî –Ω–∞–∂–º–∏—Ç–µ /start.`
            );
        }

        if (completed === total) {
            // –í—Å–µ –∑–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã
            if (!(await User.findOne({ userId }))) {
                await new User({ userId, chatId }).save();
            }
            return bot.sendMessage(
                chatId,
                '‚úÖ –í—ã –ø—Ä–æ—à–ª–∏ –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è! –¢–µ–ø–µ—Ä—å –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–¥–∏–∞.'
            );
        }

        // –ï—Å—Ç—å –∑–∞–¥–∞—á–∏, –Ω–æ –Ω–µ –≤—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã
        return bot.sendMessage(
            chatId,
            `üïí –í—ã–ø–æ–ª–Ω–µ–Ω–æ: ${completed} –∏–∑ ${total} –∑–∞–¥–∞–Ω–∏–π.\n` +
                `–ó–∞–≤–µ—Ä—à–∏—Ç–µ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –≤ –º–∏–Ω–∏-–∞–ø–ø –∏ —Å–Ω–æ–≤–∞ –Ω–∞–∂–º–∏—Ç–µ /start:\n${MINI_APP_LINK}`
        );
    } catch (err) {
        console.error(
            '–û—à–∏–±–∫–∞ get_completed_tasks:',
            err.response?.data || err.message
        );
        // –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ ‚Äî –Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤ –º–∏–Ω–∏-–∞–ø–ø
        return bot.sendMessage(
            chatId,
            `‚ö†Ô∏è –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ –º–æ–≥—É –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–¥–∞–Ω–∏—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –º–∏–Ω–∏-–∞–ø–ø:\n${MINI_APP_LINK}\n\n` +
                `–ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è ‚Äî –Ω–∞–∂–º–∏—Ç–µ /start.`
        );
    }
});

// --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Å—ã–ª–æ–∫ –Ω–∞ –º–µ–¥–∏–∞ ---
bot.on('message', async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    const text = msg.text?.trim();

    if (!text || text.startsWith('/')) return;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—à—ë–ª –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è
    if (!(await User.findOne({ userId }))) {
        return bot.sendMessage(
            chatId,
            `üîí –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞. –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∑–∞–¥–∞–Ω–∏—è:\n${MINI_APP_LINK}\n\n` +
                `–ó–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ /start.`
        );
    }

    if (!/^https?:\/\//i.test(text)) {
        return bot.sendMessage(
            chatId,
            'üìé –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É.'
        );
    }

    try {
        const res = await fetch(
            'https://social-download-all-in-one.p.rapidapi.com/v1/social/autolink',
            {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'x-rapidapi-key': RAPIDAPI_KEY,
                    'x-rapidapi-host':
                        'social-download-all-in-one.p.rapidapi.com',
                },
                body: JSON.stringify({ url: text }),
            }
        );
        const result = await res.json();

        if (!Array.isArray(result.medias) || result.medias.length === 0) {
            return bot.sendMessage(chatId, '‚ùå –ú–µ–¥–∏–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.');
        }

        const mediaGroup = [];
        for (let i = 0; i < result.medias.length && i < 10; i++) {
            const m = result.medias[i];
            const ext = m.type === 'video' ? 'mp4' : 'jpg';
            const fn = `media_${Date.now()}_${i}.${ext}`;
            const filePath = await downloadMedia(m.url, fn);
            mediaGroup.push({
                type: m.type === 'video' ? 'video' : 'photo',
                media: fs.createReadStream(filePath),
            });
        }

        await bot.sendMediaGroup(chatId, mediaGroup);
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–¥–∏–∞:', err);
        bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–¥–∏–∞.');
    }
});

bot.on('polling_error', console.error);
