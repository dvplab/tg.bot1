import dotenv from 'dotenv';
dotenv.config();

import TelegramBot from 'node-telegram-bot-api';
import axios from 'axios';
import mongoose from 'mongoose';
import fs from 'fs';
import path from 'path';
import os from 'os';

// --- –ö–æ–Ω—Ñ–∏–≥ ---
const { TELEGRAM_TOKEN, RAPIDAPI_KEY, MONGO_URI, FLYER_API_KEY } = process.env;
if (!TELEGRAM_TOKEN || !RAPIDAPI_KEY || !MONGO_URI || !FLYER_API_KEY) {
    console.error('‚ùå –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–¥–∞–Ω—ã');
    process.exit(1);
}

// --- MongoDB ---
mongoose
    .connect(MONGO_URI)
    .then(() => console.log('‚úÖ MongoDB –ø–æ–¥–∫–ª—é—á–µ–Ω–∞'))
    .catch((err) => console.error('‚ùå –û—à–∏–±–∫–∞ MongoDB:', err));

const User = mongoose.model(
    'User',
    new mongoose.Schema({
        userId: { type: Number, required: true, unique: true },
        chatId: { type: Number, required: true },
    })
);

// --- –¢–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç ---
const bot = new TelegramBot(TELEGRAM_TOKEN, { polling: true });

// –£–º–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –º–∏–Ω–∏-–∞–ø–ø
const MINI_APP_LINK = 'https://t.me/FlyWebTasksBot/app?startapp=3HkVHT';

// –ó–∞–≥—Ä—É–∑—á–∏–∫ –º–µ–¥–∏–∞ (–æ—Å—Ç–∞–ª—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
async function downloadMedia(url, filename) {
    const resp = await axios.get(url, {
        responseType: 'stream',
        timeout: 30000,
    });
    const file = path.join(os.tmpdir(), filename);
    const w = fs.createWriteStream(file);
    resp.data.pipe(w);
    return new Promise((res, rej) => {
        w.on('finish', () => res(file));
        w.on('error', rej);
    });
}

// --- /start: –ø—Ä–æ–≤–µ—Ä—è–µ–º get_completed_tasks ---
bot.onText(/\/start/, async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;

    try {
        // –ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
        const { data } = await axios.post(
            'https://api.flyerservice.io/get_completed_tasks',
            { key: FLYER_API_KEY, user_id: userId },
            { headers: { 'Content-Type': 'application/json' } }
        );

        // –ï—Å–ª–∏ API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É/–≤—Ä–∞–ø–Ω–∏–Ω–≥
        if (data.error) {
            console.warn('Flyer get_completed_tasks error:', data.error);
            return bot.sendMessage(
                chatId,
                `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–¥–∞–Ω–∏–π: ${data.error}`
            );
        }

        const completedCount = (data.result.completed_tasks || []).length;
        const totalCount = data.result.count_all_tasks || 0;

        // –ï—Å–ª–∏ –≤—Å—ë –≤—ã–ø–æ–ª–Ω–µ–Ω–æ ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø
        if (totalCount > 0 && completedCount === totalCount) {
            if (!(await User.findOne({ userId }))) {
                await new User({ userId, chatId }).save();
            }
            return bot.sendMessage(
                chatId,
                '‚úÖ –í—ã –ø—Ä–æ—à–ª–∏ –∑–∞–¥–∞–Ω–∏—è! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–¥–∏–∞.'
            );
        }

        // –ò–Ω–∞—á–µ ‚Äî –∑–∞–Ω–æ–≤–æ —à–ª—ë–º —Å—Å—ã–ª–∫—É –Ω–∞ –º–∏–Ω–∏-–∞–ø–ø
        return bot.sendMessage(
            chatId,
            `üìã –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∑–∞–¥–∞–Ω–∏—è –≤ –º–∏–Ω–∏-–∞–ø–ø:\n${MINI_APP_LINK}\n\n` +
                `–ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è ‚Äî —Å–Ω–æ–≤–∞ –Ω–∞–∂–º–∏—Ç–µ /start.`
        );
    } catch (err) {
        console.error(
            '–û—à–∏–±–∫–∞ get_completed_tasks:',
            err.response?.data || err.message
        );
        bot.sendMessage(
            chatId,
            '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
        );
    }
});

// --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª—é–±–æ–≥–æ –¥—Ä—É–≥–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: –∑–∞–≥—Ä—É–∑–∫–∞ –º–µ–¥–∏–∞ ---
bot.on('message', async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    const text = msg.text?.trim();

    // –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –∏ –ø—É—Å—Ç—ã–µ
    if (!text || text.startsWith('/')) return;

    // –ø—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à—ë–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —á–µ—Ä–µ–∑ –∑–∞–¥–∞–Ω–∏—è
    if (!(await User.findOne({ userId }))) {
        return bot.sendMessage(
            chatId,
            `üîí –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ ‚Äî —Å–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∑–∞–¥–∞–Ω–∏—è:\n${MINI_APP_LINK}\n\n` +
                `–ó–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ /start.`
        );
    }

    // –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏
    if (!/^https?:\/\//i.test(text)) {
        return bot.sendMessage(
            chatId,
            'üìé –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É.'
        );
    }

    // –¥–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ —Å–∫–∞—á–∏–≤–∞—Ç–µ–ª—é
    try {
        const res = await fetch(
            'https://social-download-all-in-one.p.rapidapi.com/v1/social/autolink',
            {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'x-rapidapi-key': RAPIDAPI_KEY,
                    'x-rapidapi-host':
                        'social-download-all-in-one.p.rapidapi.com',
                },
                body: JSON.stringify({ url: text }),
            }
        );
        const result = await res.json();

        if (!Array.isArray(result.medias) || result.medias.length === 0) {
            return bot.sendMessage(chatId, '‚ùå –ú–µ–¥–∏–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.');
        }

        const mediaGroup = [];
        for (let i = 0; i < result.medias.length && i < 10; i++) {
            const m = result.medias[i];
            const ext = m.type === 'video' ? 'mp4' : 'jpg';
            const fn = `media_${Date.now()}_${i}.${ext}`;
            const filePath = await downloadMedia(m.url, fn);
            mediaGroup.push({
                type: m.type === 'video' ? 'video' : 'photo',
                media: fs.createReadStream(filePath),
            });
        }

        await bot.sendMediaGroup(chatId, mediaGroup);
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –º–µ–¥–∏–∞:', err);
        bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–¥–∏–∞.');
    }
});

bot.on('polling_error', console.error);
