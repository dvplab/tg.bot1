import dotenv from 'dotenv';
dotenv.config();

import TelegramBot from 'node-telegram-bot-api';
import axios from 'axios';
import mongoose from 'mongoose';
import fs from 'fs';
import path from 'path';
import os from 'os';
import fetch from 'node-fetch';
import https from 'https';
const agent = new https.Agent({ family: 4 }); // —Ç–æ–ª—å–∫–æ IPv4

const { TELEGRAM_TOKEN, RAPIDAPI_KEY, MONGO_URI, FLYER_API_KEY } = process.env;
if (!TELEGRAM_TOKEN || !RAPIDAPI_KEY || !MONGO_URI || !FLYER_API_KEY) {
    console.error('‚ùå –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–¥–∞–Ω—ã');
    process.exit(1);
}

mongoose
    .connect(MONGO_URI)
    .then(() => console.log('‚úÖ MongoDB –ø–æ–¥–∫–ª—é—á–µ–Ω–∞'))
    .catch((err) => console.error('‚ùå –û—à–∏–±–∫–∞ MongoDB:', err));

const User = mongoose.model(
    'User',
    new mongoose.Schema({
        userId: { type: Number, required: true, unique: true },
        chatId: { type: Number, required: true },
    })
);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ - –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –¥–æ bot.on(...)
const bot = new TelegramBot(TELEGRAM_TOKEN, { polling: true });
const MINI_APP_LINK = 'https://t.me/FlyWebTasksBot/app?startapp=3HkVHT';

async function downloadMedia(url, filename) {
    const resp = await axios.get(url, {
        responseType: 'stream',
        timeout: 60000,
        httpsAgent: agent,
        headers: {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
            'Accept-Language': 'ru,en;q=0.9',
            // 'Cookie': '...' // –µ—Å–ª–∏ –Ω—É–∂–Ω–æ, –º–æ–∂–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å cookie –∏–∑ –±—Ä–∞—É–∑–µ—Ä–∞
        }
    });

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    const contentType = resp.headers['content-type'];
    if (!contentType.startsWith('image/') && !contentType.startsWith('video/')) {
        throw new Error('–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π Content-Type: ' + contentType);
    }

    const file = path.join(os.tmpdir(), filename);
    const w = fs.createWriteStream(file);
    resp.data.pipe(w);
    return new Promise((res, rej) => {
        w.on('finish', () => res(file));
        w.on('error', rej);
    });
}

// --- /start ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ Flyer ---
bot.onText(/\/start/, async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;

    try {
        const { data } = await axios.post(
            'https://api.flyerservice.io/get_completed_tasks',
            { key: FLYER_API_KEY, user_id: userId },
            { headers: { 'Content-Type': 'application/json' } }
        );

        if (data.error || !data.result) {
            return bot.sendMessage(
                chatId,
                `üìã –ß—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∑–∞–¥–∞–Ω–∏—è:\n${MINI_APP_LINK}\n\n–ó–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ /start.`
            );
        }

        const completed = (data.result.completed_tasks || []).length;
        const total = data.result.count_all_tasks || 0;

        if (total === 0) {
            return bot.sendMessage(
                chatId,
                `üìã –ß—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –º–∏–Ω–∏-–∞–ø–ø:\n${MINI_APP_LINK}\n\n–ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π –Ω–∞–∂–º–∏—Ç–µ /start.`
            );
        }

        if (completed < total) {
            return bot.sendMessage(
                chatId,
                `üïí –í—ã–ø–æ–ª–Ω–µ–Ω–æ: ${completed} –∏–∑ ${total} –∑–∞–¥–∞–Ω–∏–π.\n–ó–∞–≤–µ—Ä—à–∏—Ç–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∑–¥–µ—Å—å:\n${MINI_APP_LINK}`
            );
        }

        if (!(await User.findOne({ userId }))) {
            await new User({ userId, chatId }).save();
        }

        return bot.sendMessage(
            chatId,
            '‚úÖ –í—Å–µ –∑–∞–¥–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –º–µ–¥–∏–∞.'
        );
    } catch (err) {
        console.error('Flyer API error:', err.response?.data || err.message);
        return bot.sendMessage(
            chatId,
            `‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–¥–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –ø—Ä–æ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:\n${MINI_APP_LINK}`
        );
    }
});

// --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Å—ã–ª–æ–∫ –Ω–∞ –º–µ–¥–∏–∞ (—Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Social Download All-in-One API) ---
bot.on('message', async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    const text = msg.text?.trim();

    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –∏ –ø—É—Å—Ç—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    if (!text || text.startsWith('/')) return;

    try {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const user = await User.findOne({ userId });
        if (!user) {
            await bot.sendMessage(
                chatId,
                `üîí –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞. –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∑–∞–¥–∞–Ω–∏—è:\n${MINI_APP_LINK}\n\n–ó–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ /start.`
            );
            await SendPostToChat(chatId);
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —Å—Å—ã–ª–∫–∏
        if (!/^https?:\/\//i.test(text)) {
            await bot.sendMessage(
                chatId,
                'üìé –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É.'
            );
            await SendPostToChat(chatId);
            return;
        }

        // --- –ó–∞–ø—Ä–æ—Å –∫ Social Download All-in-One API ---
        const apiUrl =
            'https://social-download-all-in-one.p.rapidapi.com/v1/social/autolink';
        const options = {
            method: 'POST',
            headers: {
                'x-rapidapi-key': RAPIDAPI_KEY,
                'x-rapidapi-host': 'social-download-all-in-one.p.rapidapi.com',
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ url: text }),
        };

        await bot.sendMessage(chatId, '‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –º–µ–¥–∏–∞...');

        const res = await fetch(apiUrl, options);
        const result = await res.json();

        console.log('API result:', result);
        const postText = result.text || result.title || '';
        console.log('postText:', postText, 'length:', postText.length);

        if (
            result.error ||
            !Array.isArray(result.medias) ||
            result.medias.length === 0
        ) {
            await bot.sendMessage(
                chatId,
                '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–µ–¥–∏–∞ –∏–∑ API.'
            );
            console.error('API Error or no medias found:', result);
            await SendPostToChat(chatId);
            return;
        }

        // --- –°–∫–∞—á–∏–≤–∞–µ–º –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –º–µ–¥–∏–∞ ---
        const mediaFiles = [];
        for (let i = 0; i < result.medias.length; i++) {
            const mediaItem = result.medias[i];
            if (!mediaItem.url || !mediaItem.type) continue;

            const telegramMediaType = mediaItem.type === 'video' ? 'video' : 'photo';
            const urlObj = new URL(mediaItem.url);
            const fileExtension = path.extname(urlObj.pathname).toLowerCase() || (mediaItem.type === 'video' ? '.mp4' : '.jpg');
            const fn = `media_${Date.now()}_${i}${fileExtension}`;

            let filePath;
            let contentType;
            try {
                const resp = await axios.get(mediaItem.url, {
                    responseType: 'stream',
                    timeout: 60000,
                    httpsAgent: agent,
                    headers: {
                        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
                        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
                        'Accept-Language': 'ru,en;q=0.9',
                    }
                });
                contentType = resp.headers['content-type'];
                filePath = path.join(os.tmpdir(), fn);
                const w = fs.createWriteStream(filePath);
                resp.data.pipe(w);
                await new Promise((res, rej) => {
                    w.on('finish', res);
                    w.on('error', rej);
                });
            } catch (e) {
                console.warn('–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:', e.message);
                continue;
            }

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞
            if (telegramMediaType === 'photo' && !contentType.startsWith('image/')) continue;
            if (telegramMediaType === 'video' && !contentType.startsWith('video/')) continue;

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞
            const stats = fs.statSync(filePath);
            if (stats.size < 1000) continue;

            mediaFiles.push({
                type: telegramMediaType,
                media: fs.createReadStream(filePath),
            });
        }

        // --- –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞ –≥—Ä—É–ø–ø–∞–º–∏ –ø–æ 10 ---
        for (let i = 0; i < mediaFiles.length; i += 10) {
            const group = mediaFiles.slice(i, i + 10);

            // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å—å –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —ç–ª–µ–º–µ–Ω—Ç—É –≥—Ä—É–ø–ø—ã
            if (group.length > 0) {
                const lastIndex = group.length - 1;
                group[lastIndex] = {
                    ...group[lastIndex],
                    caption: '–°–∫–∞—á–∞–Ω–æ –ø—Ä–∏ –ø–æ–º–æ—â–∏ @DownloadVideoBot',
                };
            }

            await bot.sendMediaGroup(chatId, group);
        }

        // --- –ü–æ—Å–ª–µ –≤—Å–µ—Ö –º–µ–¥–∏–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å ---
        if (postText.length > 4096) {
            try {
                console.log('–û—Ç–ø—Ä–∞–≤–ª—è—é —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ (4096):', postText.slice(0, 4096));
                await bot.sendMessage(chatId, postText.slice(0, 4096));
            } catch (e) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å—Ç–∞ (4096):', e);
            }
        } else if (postText) {
            try {
                console.log('–û—Ç–ø—Ä–∞–≤–ª—è—é —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞:', postText);
                await bot.sendMessage(chatId, postText);
            } catch (e) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å—Ç–∞:', e);
            }
        }
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∏–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –º–µ–¥–∏–∞:', err);
        await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–¥–∏–∞.');
    } finally {
        await SendPostToChat(chatId);
    }
});

bot.on('polling_error', console.error);

// --- –†–µ–∫–ª–∞–º–Ω–∞—è –≤—Å—Ç–∞–≤–∫–∞ ---
async function SendPostToChat(chatId) {
    // –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ—Ç —Ç–æ–∫–µ–Ω –º–æ–∂–µ—Ç –±—ã—Ç—å —É—Å—Ç–∞—Ä–µ–≤—à–∏–º –∏–ª–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º.
    // –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–≤–æ–π –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –¥–ª—è GramAds.
    const token =
        'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyNzYzNyIsImp0aSI6ImQ2MDA3M2YwLTgxMTctNDc4Yy1hNjQ2LWEyNDQ4YjEyNWZkNiIsIm5hbWUiOiJEb3dubG9hZFVpZGVvQm90IiwiYm90aWQiOiIxNDgxNCIsImh0dHA6Ly9zY2hlbWFzLnhtbHNvYXAub3JnL3dzLzIwMDUvMDUvaWRlbnRpdHkvY2xhaW1zL25hbWVpZGVudGlmaWVyIjoiMjc2MzciLCJuYmYiOjE3NDkyMzQxMzAsImV4cCI6MTc0OTQ0MjkzMCwiaXNzIjoiU3R1Z25vdiIsImF1ZCI6IlVzZXJzIn0.MIVMoDtUIRSuIrpv9b9vqUOXoqwkioDtP0DnNnlo9m0';

    try {
        const res = await fetch('https://api.gramads.net/ad/SendPost', {
            method: 'POST',
            headers: {
                Authorization: `bearer ${token}`,
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ SendToChatId: chatId }),
        });

        if (!res.ok) {
            console.warn(`‚ö†Ô∏è –†–µ–∫–ª–∞–º–∞ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: ${res.statusText}`);
            return;
        }

        const result = await res.text();
        console.log(`üì¢ –†–µ–∫–ª–∞–º–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ —á–∞—Ç ${chatId}`);
    } catch (err) {
        console.warn('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∫–ª–∞–º—ã:', err.message);
    }
}
